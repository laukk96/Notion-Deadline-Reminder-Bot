'use strict';

var crypt = require('./crypt');

function Module (connection, options) {
	this.connection = connection;
	this.pepper = options.pepper;
	this.passwordMin = options.passwordMin;
	this.passwordMax = options.passwordMax;
	this.Model = connection.model('User', {
		username: {type: String, unique: true, required: true, dropDubs: true, index: true},
		password: {type: String, required: true},
		email: {type: String, unique: true, required: true, dropDubs: true, index: true},
		salt: {type: String, required: true}
	});
}

Module.prototype.login = function (session, email, password, callback) {
	var that = this;
	if (session && email && password && callback) {
		this.Model.findOne({email: email}, 'password salt username _id', function (err, user) {
			if (!err) {
				if (crypt.checkPassword(that.pepper, password, user.password, user.salt)) {
					session.loggedIn = true;
					session.user = {
						username: user.username,
						email: email,
						id: user._id
					};
					session.save();
					return callback(null, {
						username: user.username,
						email: email,
						id: user._id
					});
				} else {
					return callback(true);
				}
			} else {
				return callback(true);
			}
		});
	} else {
		return callback && callback(true);
	}
};

Module.prototype.logout = function (session, callback) {
	delete session.loggedIn;
	delete session.user;
	session.save();
	callback(null, true);
};

Module.prototype.register = function (username, email, password, callback) {
	if (password && username && email && password.length >= this.passwordMin && password.length <= this.passwordMax) {
		var hashed = crypt.createPassword(this.pepper, password);
		that.Model.create({
			username: username,
			password: hashed.password,
			email: email,
			salt: hashed.salt
		}, callback);
	} else {
		callback(true);
	}
};

Module.prototype.verify = function (session, callback) {
	if (session.loggedIn) {
		callback(null, session.user);
	} else {
		callback(true, null);
	}
};

module.exports = Module;
